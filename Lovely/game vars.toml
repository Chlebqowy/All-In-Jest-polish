[manifest]
version = "1.0.0"
dump_lua = true
priority = 214748364

[[patches]] #G.Game.current_round
[patches.pattern]
target = 'game.lua'
pattern = '''
reroll_cost_increase = 0,
'''
position = 'after'
match_indent = true
payload = '''
jest_magick_joker_card = {suit = 'Spades'},
jest_highest_scored_mult = {amount = 0, trigger = true},
jest_you_broke_it_card = {rank = nil, enhancement = nil, id = nil},	
'''

[[patches]]  
[patches.pattern]
target = 'game.lua'
pattern = '''
reset_castle_card()
'''
position = 'after'
match_indent = true
payload = '''
reset_jest_magick_joker_card()
reset_jest_you_broke_it_card()
'''

[[patches]] #G.GAME 
[patches.pattern]
target = 'game.lua'
pattern = '''
unused_discards = 0,'''
position = 'after'
match_indent = true 
payload = '''
all_in_jest = {
	apply = { -- Specific triggers for cards
		v_aij_gold_medal_been_used = false,
		ticket_trigger = true,
		visage_last_sold = nil,
		clay_last_destroyed = nil,
	}, 
	dizzard_shop = false,
	pit_blind_ante = 4,
	blind_tags = {has_multiple = false, Small = {two = nil, three = nil}, Big = {two = nil, three = nil}, selected_index = nil},
	advanced_hand_usage_run = {},
	advanced_hand_usage = {},
	AIJAnimated = {
		c_aij_scopophobia = { frames_per_row = 18, frames = 144, start_frame = 126, fps = 12, hold = { frames = 2, max_frames = 144, min_frames = 128, min_start_frames = 126, hold_for_min = 12, hold_for_max = 35 } },
		j_aij_electric_snow = { frames_per_row = 25, frames = 382, start_frame = 375, fps = 16, },
		j_aij_wireframe = { frames_per_row = 25, frames = 440, start_frame = 430, fps = 10, },
		j_aij_baddata = { 
			frames_per_row = 25, 
			frames = 456, 
			start_frame = 441,
			fps = 10,
			func = function(anim, obj, loc)
				-- Runs every frame
				anim.temp_hold = anim.temp_hold or (anim.fps * math.random(3,6))
				anim.cur_frame = anim.cur_frame or 0 
				anim.cur_frame = anim.cur_frame + 1
				anim.cur_frames = anim.cur_frames or {}
				anim.cur_frames[#anim.cur_frames+1] = loc
				if anim.cur_frame >= anim.temp_hold then
					anim.fps = math.random(7,12)
					anim.temp_hold = (anim.fps * math.random(3,6))
					anim.cur_frame = 0
					local temp_loc = anim.cur_frames[math.random(1,#anim.cur_frames)]
					obj.pos.x = temp_loc%(anim.frames_per_row or anim.frames)
					obj.pos.y = math.floor(temp_loc/(anim.frames_per_row or anim.frames))
					anim.cur_frames = nil
				end
			end,
			layers = {
				soul_pos = {
					frames_per_row = 25, 
					frames = 477, 
					start_frame = 456,
					fps = 10,
					func = function(anim, obj, loc)
						-- Runs every frame
						anim.temp_hold = anim.temp_hold or (anim.fps * math.random(3,6))
						anim.other_temp_hold = anim.other_temp_hold or anim.temp_hold + (anim.fps * math.random(1,2))
						anim.cur_frame = anim.cur_frame or 0 
						anim.cur_frame = anim.cur_frame + 1
						anim.other_cur_frame = anim.other_cur_frame or 0 
						anim.other_cur_frame = anim.other_cur_frame + 1
						anim.cur_frames = anim.cur_frames or {}
						anim.cur_frames[#anim.cur_frames+1] = loc
						anim.special_frames = anim.special_frames or {
							{2,19}, {3,19}, {4,19}, {5,19}, {6,19}, {7,19}, {8,19}, {9,19},
						}
						if anim.cur_frame >= anim.temp_hold and not (anim.other_cur_frame >= anim.other_temp_hold) then
							anim.fps = math.random(7,12)
							anim.temp_hold = (anim.fps * math.random(3,6))
							anim.cur_frame = 0
							local temp_loc = anim.cur_frames[math.random(1,#anim.cur_frames)]
							obj.soul_pos.x = temp_loc%(anim.frames_per_row or anim.frames)
							obj.soul_pos.y = math.floor(temp_loc/(anim.frames_per_row or anim.frames))
							anim.cur_frames = nil
						end
						if anim.other_cur_frame >= anim.other_temp_hold then
							if not anim.temp_hold_2 then
								anim.soul_pos_pos = anim.special_frames[math.random(1, #anim.special_frames)]
								anim.held_frame = anim.soul_pos_pos[2]*(anim.frames_per_row or anim.frames)+anim.soul_pos_pos[1]
							end
							anim.temp_hold_2 = anim.temp_hold_2 or math.random(1,3)
							anim.hold_2_cur_frame = anim.hold_2_cur_frame or 0
							anim.hold_2_cur_frame = anim.hold_2_cur_frame + 1
							if anim.hold_2_cur_frame >= anim.temp_hold_2 then
								anim.hold_2_cur_frame = nil
								anim.soul_pos_pos = nil
								anim.held_frame = nil
								anim.temp_hold_2 = nil
								anim.other_cur_frame = 0
								anim.other_temp_hold = anim.temp_hold + (anim.fps * math.random(1,2))
							end
						end
					end,
				},
				aij_floating_sprite_1 = {
					frames_per_row = 25, 
					frames = 491, 
					start_frame = 485,
					fps = 10,
					func = function(anim, obj, loc)
						-- Runs every frame
						anim.temp_hold = anim.temp_hold or (anim.fps * math.random(3,6))
						anim.cur_frame = anim.cur_frame or 0 
						anim.cur_frame = anim.cur_frame + 1
						anim.held_frame = 19*(anim.frames_per_row or anim.frames)+15
						anim.special_frames = anim.special_frames or {
							{10,19}, {11,19}, {12,19}, {13,19}, {14,19}, 
						}
						if anim.cur_frame >= anim.temp_hold then
							if not anim.temp_hold_2 then
								anim.soul_pos_pos = anim.special_frames[math.random(1, #anim.special_frames)]
								anim.held_frame = anim.soul_pos_pos[2]*(anim.frames_per_row or anim.frames)+anim.soul_pos_pos[1]
							end
							anim.temp_hold_2 = anim.temp_hold_2 or math.random(1,3)
							anim.hold_2_cur_frame = anim.hold_2_cur_frame or 0
							anim.hold_2_cur_frame = anim.hold_2_cur_frame + 1
							if anim.hold_2_cur_frame >= anim.temp_hold_2 then
								anim.hold_2_cur_frame = nil
								anim.soul_pos_pos = nil
								anim.held_frame = 19*(anim.frames_per_row or anim.frames)+15
								anim.temp_hold_2 = nil
								anim.cur_frame = 0
								anim.temp_hold = anim.temp_hold or (anim.fps * math.random(3,6))
							end
						end
					end,
				}
			}
		},
		m_aij_simulated = {frames_per_row = 10, frames = 20, start_frame = 10, fps = 10,}
	},
	patches_sprites = {},
	reset_score = {chips = false, mult = false, chip_total = false, blind_total = false},
	secret_hands = {},
	gold_tag_rate = 1,
},
-- move these into all_in_jest at some point
jest_unused_hands = 0,
jest_legendary_pool = {in_shop = false, rate = 1.00},
jest_stored_memory_card = nil,
jest_change_booster_options = {op = {add = 0, mult = 0, div = 0, sub = 0}, trigger = false, option = "", pack_choices = 0}, -- both, pick, or size
jest_void_planet_ante = false,
jest_kasperle_voucher_ante = false,
jest_kilroy_sold = 0,
jest_bought_jokers = 0,
jest_magic_mirror_trigger = true,
jest_toothy_joker_tarots = 0,
jest_jester_zombie_trigger = false,
jest_omlette_appearence_eggs = 0,
jest_free_stultor_rerolls = 0,
jest_fairy_edition_rate = 1,
['jest_upgrade_tab'] = false,
previous_jest_upgrade_tab = false,
shop_galloping_dominoed = false,
temp_create_card = {},
'''

[[patches]] #Colors
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''enhanced = G.C.SECONDARY_SET.Enhanced'''
position = 'before'
payload = '''
jest_inherent = HEX("b7e1d7"),
jest_glitter = HEX("ff97ff"),
'''
match_indent = true